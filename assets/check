#!/bin/bash

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source /opt/resource/common.sh

# Read inputs
source=$1
payload=$(mktemp $TMPDIR/helm-resource-request.XXXXXX)
cat > $payload <&0

# Prepare
setup_resource $payload $source
echo "Resource setup successful." 

# Parse parameters
namespace=$(jq -r '.source.namespace // "default"' < $payload)
previous_namespace=$(jq -r '.version.namespace // "default"' < $payload || true)
release=$(jq -r '.source.release // ""' < $payload)
previous_release=$(jq -r '.version.release' < $payload || true)
previous_revision=$(jq -r '.version.revision' < $payload || true)

if [ -z "$namespace" ]; then
  release="$previous_namespace"
fi

if [ -z "$release" ]; then
  release="$previous_release"
fi

if [ "$release" ] ; then
  current_revision=$($helm_bin history --max 20 --namespace $namespace $release 2>/dev/null | grep -i 'deployed' | awk '{print $1}' )

  if [ "$previous_revision" != "$current_revision" ] ; then
    revision="$current_revision"
  else
    revision="$previous_revision"
  fi
  if [ "$revision" ]; then
    echo $(jq -n "{version:{release:\"$release\", namespace:\"$namespace\", revision:\"$revision\"}}")
    exit 0
  fi
fi

# if we get here we couldnt find a revision to return so we bail - this is a good thing
# since check should fail if its configuration cant point to a verifiable state.
echo "Unable to confirm any revision of release '$release' in  namspace: $namespace, does it exist yet?"
exit 1
