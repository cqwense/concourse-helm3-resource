#!/bin/bash

set -e
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source /opt/resource/common.sh

# Read inputs
payload=$(mktemp helm-resource-request.XXXXXX)
cat > $payload <&0

# Prepare
setup_resource $payload $source
echo "Resource setup successful." 

# Parse parameters
namespace=$(jq -r '.source.namespace // "default"' < $payload)
previous_namespace=$(jq -r '.version.namespace // ""' < $payload)

echo "namespace : $namespace"

if [[ $previous_namspace && "$previous_namespace" != "$namespace" ]]; then
  namespace="$previous_namespace"
fi

echo "namespace now: $namespace"

release=$(jq -r '.source.release // ""' < $payload)
previous_release=$(jq -r '.version.release // ""'< $payload)

echo "release : $release" 
if [[ $previous_release && "$previous_release" != "$release" ]]; then
  release="$previous_release"
fi

echo "release now : $release "

revision="0"
previous_revision=$(jq -r '.version.revision // "0"' < $payload)

if [[ $previous_revision && "$previous_revision" != "$revision" ]]; then
  revision="$prevision_revision"
fi

echo "revision now : $revision"


if [ "$release" ] ; then
  echo "release triggered true"
  current_revision=$($helm_bin history --max 20 --namespace $namespace $release 2>/dev/null | grep -i 'deployed' | awk '{print $1}' )

  echo "current_version : $current_version"

  if [ "$previous_revision" != "$current_revision" ] ; then
    revision="$current_revision"
  else
    revision="$previous_revision"
  fi
  
  echo "revision now : $revision" 
  if [ "$revision" ]; then
    echo "revision triggered true"
    echo $(jq -n "{version:{release:\"$release\", namespace:\"$namespace\", revision:\"$revision\"}}")
    exit 0
  fi
fi

# if we get here we couldnt find a revision to return so we bail - this is a good thing
# since check should fail if its configuration cant point to a verifiable state.
echo "Unable to confirm any revision of release '$release' in  namspace: $namespace, does it exist yet?"
exit 1
